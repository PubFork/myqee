#!/usr/bin/env php
<?php
define('DIR_MANUAL', realpath(dirname(__FILE__).'/../').'/');
include (dirname(__FILE__).'/lib/markdown.php');
include (dirname(__FILE__).'/lib/markdown_extra.php');

# 文档组
$groups = array
(
    array
    (
        'type'          => 'manual',
        'out_dir'       => '',
        'dir'           => DIR_MANUAL,
        'base_href'     => '',
        'top_menu_text' => 'Welecome',
    ),
    array
    (
        'type'       => 'core',
        'out_dir'       => 'core/',
        'dir'           => realpath(DIR_MANUAL.'../core/').'/',
        'base_href'     => '../',
        'top_menu_text' => 'Core manual',
    ),
    array
    (
        'type'          => 'team',
        'out_dir'       => 'team',
        'dir'           => realpath(DIR_MANUAL.'../team_library/').'/',
        'base_href'     => '../',
        'top_menu_text' => 'Team library manual',
    ),
);

# 读取项目配置
if (is_file(DIR_MANUAL.'../config.php'))
{
    $site_config = array();
    include_config_file($site_config, DIR_MANUAL.'../config.php');

    $projects_config = $site_config['projects'];
    if (is_array($projects_config))
    {
        $tmp = array();
        foreach ($projects_config as $value)
        {
            $tmp[$value['dir']] = $value['name'];
        }
        $projects_config = $tmp;
        unset($tmp);
    }
    else
    {
        $projects_config = array();
    }
}
else
{
    $projects_config = array();
}

$projects = array();
$project_dir = realpath(DIR_MANUAL . '../projects/');
if ($project_dir)foreach (glob($project_dir.'/*') as $value)
{
    if ($value=='.'||$value=='..')continue;
    if (is_dir($value))
    {
        $basename = basename($value);
        $projects[$basename] = isset($projects_config[$basename])?$projects_config[$basename]:$basename;

        $groups[] = array
        (
            'type'          => 'project',
            'project'       => $basename,
            'out_dir'       => 'project/'.$basename.'/',
            'dir'           => $value.'/',
            'base_href'     => '../../',
            'top_menu_text' => 'Project manual',
        );
    }
}



$libraries = array();
$lib_dir = realpath(DIR_MANUAL . '../libraries/');
if ($lib_dir)foreach (glob($lib_dir.'/*') as $value)
{
    if ($value=='.'||$value=='..')continue;
    if (is_dir($value))
    {
        $dir1 = basename($value);
        $libraries[$dir1] = array();

        foreach (glob($value.'/*') as $dir2)
        {
            if ($dir2=='.'||$dir2=='..')continue;
            if (is_dir($dir2))
            {
                $dir2 = basename($dir2);
                $libraries[$dir1][] = $dir2;

                $groups[] = array
                (
                    'type'          => 'library',
                    'library'       => $dir1.'.'.$dir2,
                    'out_dir'       => 'library/'.$dir1.'/'.$dir2.'/',
                    'base_href'     => '../../../',
                    'dir'           => $dir2.'/',
                    'top_menu_text' => 'Libray manual',
                );
            }
        }
    }
}

$current_lang = '';
$config = @parse_ini_file(dirname(__FILE__).'/config.ini' , true);

if (!$config)
{
    echo "没有找到相关config.ini配置或配置不正确，将采用默认值执行\n\n";
    $config = array();
}
if (!$config['lang'])
{
    # 默认语言包
    $config['lang'] = array('zh-cn'=>'简体中文');
}
$default_lang = $config['lang'];
$default_lang = key($default_lang);


if (!$config['default_title'])$config['default_title'] = 'MyQEE Manual';


# 文档上下文菜单列表
$next_and_prev_list = array();

# 记录上一级目录列表
$parent_menu = array();






# 获取所有文档文件列表
$files = get_all_files();
// print_r($files);



create_all_html();

/*
foreach ($groups as $group)
{
    if (!is_dir($group['dir'].'guide/'))
    {
        # 没有文档目录
        continue;
    }

    foreach($config['lang'] as $lang=>$lang_name)
    {

        create_html($lang, $group);
    }
}
*/

$str = <<<EOF
<html>
<head>
    <script type="text/javascript">document.location.href = 'html/{$default_lang}/index.html';</script>
</head>
<body>
</body>
</html>
EOF;
file_put_contents(DIR_MANUAL.'index.html', $str);


echo "success\n";

function create_all_html()
{
    global $groups, $config, $files, $next_and_prev_list, $base_href;

    $success = "\x1b[32m✔\x1b[39m";
    $error   = "\x1b[31m✕\x1b[39m";

    foreach ($config['lang'] as $lang => $lang_name)
    {
        foreach ($files as $file => $lang_files)
        {
            # 当前文件可用的语言
            if (isset($lang_files[$lang]))
            {
                $file_data = $lang_files[$lang];
            }
            else
            {
                # 获取第一个语言的文档
                $file_data = current($lang_files);
            }
            $group = $groups[$file_data['group_no']];


            $global_data = get_dir_global_data($lang, $group, $file_data);


            if (false===$file_data['file'])
            {
                $content = $file_data['content'];
            }
            else
            {
                # 获取文本内容
                $content = file_get_contents($file_data['file']);
            }
            $title   = $file_data['title'];

            # 校验超链接
            $content = format_content($content, $title, $group, $lang);


            $html    = str_replace('<title>'.$config['default_title'].'</title>', '<title>'.$title.' - '.$config['default_title'].'</title>', $global_data['header_html']);

            $html   .= $content . $global_data['footer_html'];



            # 处理上一个和下一个页面连接
            $prev_next_data = $next_and_prev_list[$file];
            $prev_next_html = '';

            if ($prev_next_data[0])
            {
                $prev_data = $files[$prev_next_data[0]][$lang];
                $prev_next_html = '<div class="p-prev">&laquo;&nbsp;<a href="'.$base_href.$prev_data['out_dir'].$prev_data['filename'].'.html">' .$prev_data['title']. '</a></div>';
            }
            if ($prev_next_data[1])
            {
                $next_data = $files[$prev_next_data[1]][$lang];
                $prev_next_html .= '<div class="p-next"><a href="'.$base_href.$next_data['out_dir'].$next_data['filename'].'.html">' .$next_data['title']. '</a>&nbsp;&raquo;</div>';
            }

            $html = str_replace('<div class="prev-next-div"></div>', '<div class="prev-next-div">'.$prev_next_html.'</div>', $html);



            $out_dir = DIR_MANUAL.'html/'.$lang.'/'.$group['out_dir'].$file_data['dir'];

            create_dir($out_dir);

            //echo $out_dir.$file_data['filename'].'.html';
            if (false!==file_put_contents($out_dir.$file_data['filename'].'.html', $html))
            {
                //echo "  {$success}\n";
            }
            else
            {
                //echo "  {$error}\n";
            }
        }
    }
}

/**
 * 获取当前目录公共数据
 *
 * @param string $lang 当前语言
 * @param array $group 当前组设置
 * @param array $file_data 文件信息
 * @return array
 */
function get_dir_global_data($lang, $group, $file_data)
{
    static $data = array();
    $dir = $file_data['dir'];
    $key = $group['type'] .'/'. $lang .'/'. $dir;

    if (isset($data[$key]))return $data[$key];

    global $config, $projects, $libraries, $current_lang, $parent_menu, $base_href;

    $current_lang = $lang;

    if ($group['base_href'])
    {
        $base_href = $group['base_href'];
    }
    else
    {
        $base_href = '';
    }
    if ($dir)foreach(explode('/', trim($dir, '/')) as $item)
    {
        $base_href .= '../';
    }
    $old_group_no = $file_data['group_no'];


    # 导出变量名，给header.html和footer.html用
    $type      = $group['type'];
    $library   = $group['library'];
    $project   = $group['project'];
    $menu_html = get_menu_html($lang, $group, $file_data['dir']);


    # 头文件
    ob_start();
    include(DIR_MANUAL.'tpl/header.html');
    $header_html = ob_get_clean();

    # 页脚文件
    ob_start();
    include(DIR_MANUAL.'tpl/footer.html');
    $footer_html = ob_get_clean();

    # 返回数据
    $data[$key] = array
    (
        'header_html' => $header_html,
        'footer_html' => $footer_html,
    );

    return $data[$key];
}





function get_menu_html($lang, $group, $dir)
{
    global $menus, $parent_menu, $files;

    if (isset($menus[$lang][$group['out_dir'].$dir]))
    {
        $menu_file = $menus[$lang][$group['out_dir'].$dir];

        # 获取菜单文本
        $menu_content = file_get_contents($menu_file);

        $index_file = $group['out_dir'].$dir.'index.md';
        if (isset($files[$index_file][$lang]))
        {
            $title = $files[$index_file][$lang]['title'];
        }

        if ($title)
        {
            $menu_content = "* [{$title}](index.html)\n" . $menu_content;
        }
        else
        {
            $menu_content = "* [".__('Overview', $lang)."](index.html)\n" . $menu_content;
        }

        # 导出$menu变量给header.html使用
        $menu = Markdown::defaultTransform($menu_content);
    }
    else
    {
        $menu = '';
    }

    if ($dir && isset($parent_menu[$lang][$group['out_dir'].$dir]))
    {
        $tmp_menu_str = '';
        $tmp_menu_arr = $parent_menu[$lang][$group['out_dir'].$dir];

        foreach($tmp_menu_arr as $link => $text)
        {
            $tmp_menu_str .= "* [{$text}]({$link})\n";
        }

        $menu = '<div class="top-menu">'.Markdown::defaultTransform($tmp_menu_str).'</div>' . $menu;
    }

    return $menu;
}



function format_content($content, $title, $group, $lang)
{
    global $files, $base_href;

    # 文本处理
    $content = preg_replace('#<name>([^\r\n]+)</name>#', '<div class="function-name">'.$title.' -- $1</div>', $content);

    $content = str_replace('<title>'.$title.'</title>', '', $content);

    if (preg_match_all('#<function>([a-z0-9_]+)\.([a-z0-9_\.]+)\.([a-z0-9_]+)</function>#', $content, $m))
    {
        foreach ($m[1] as $k=>$tmp_type)
        {
            $tmp_md      = $tmp_type.'/'.str_replace('.', '/', $m[2][$k]) .'/functions/'. $m[3][$k];
            $tmp_md_link = $group['base_href'] .'../../'. $tmp_md . '.html';
            $tmp_title   = $m[1][$k] .'.'. $m[2][$k] .'.'. $m[3][$k];

            $tmp_ps = '';

            if (isset($files[$tmp_md.'.md']))
            {
                $f_file = $files[$tmp_md.'.md'];

                if (isset($f_file[$lang]))
                {
                    $f_file = $f_file[$lang];
                }
                else
                {
                    $f_file = current($f_file);
                }

                if ($f_file['function_name'])
                {
                    $tmp_ps = ' - ' . $f_file['function_name'];
                }
            }

            $content = str_replace($m[0][$k], "[{$tmp_title}]({$tmp_md_link}){$tmp_ps}", $content);
        }
    }

    # 处理超链接
    preg_match_all('#\[([^\]]+)\]\(([^\)]+)\)#', $content, $m);
    foreach ($m[2] as $k => $v)
    {
        if (substr($v, 0, 1)=='/')
        {
            $content = str_replace($m[0][$k], '['.$m[1][$k].']('.$base_href.substr($v, 1).')', $content);
        }
    }

    # 处理MD文件
    $content = MarkdownExtra::defaultTransform($content);

    return $content;
}




function create_dir($dir)
{
    if (is_dir($dir))return true;

    if (substr($dir, 0, strlen(DIR_MANUAL))==DIR_MANUAL)
    {
        $temp = explode('/', str_replace('\\', '/', substr($dir,strlen(DIR_MANUAL)) ) );
        $cur_dir = DIR_MANUAL;
    }
    else
    {
        $temp = explode('/', str_replace('\\', '/', $dir) );
        $cur_dir = '';
    }

    for($i = 0; $i < count($temp); $i++)
    {
        $cur_dir .= $temp[$i] . '/';
        if (!@is_dir($cur_dir))
        {
            if (@mkdir($cur_dir, 0755))
            {
            }
            else
            {
                return false;
            }
        }
    }

    return true;
}


function include_config_file(&$config, $file)
{
    include $file;
}

function get_all_files()
{
    global $groups, $config, $default_lang, $next_and_prev_list, $libraries, $projects, $menus, $parent_menu;

    $parent_menu_tpl = array();

    $files = array();
    foreach ($groups as $group_no => $group)
    {
        if(!is_dir($group['dir'].'guide/'))continue;

        foreach($config['lang'] as $lang=>$lang_name)
        {
            get_dir_files(&$files, $group_no, $group, $lang, '');


            if ($group['type']=='project')
            {
                if ($projects)foreach($projects as $k=>$v)
                {
                    $parent_menu_tpl[$lang]['project']['../'.$k.'/index.html'] = $v;
                }
            }
            elseif ($group['type']=='library')
            {
                if ($libraries)foreach ($libraries as $lib => $libdir)
                {
                    foreach ($libdir as $dir)
                    {
                        $parent_menu_tpl[$lang]['library']['../../'.$lib.'/'.$dir.'/index.html'] = $lib.'.'.$dir;
                    }
                }
            }
            else
            {
                $parent_menu_tpl[$lang][$group['type']]['../index.html'] = __($group['top_menu_text'], $lang);
            }
        }
    }


    $old_dir = null;
    $old_type = null;

    # 处理上下文
    $next_and_prev_list = array();
    $prev    = null;
    $current = null;
    $first   = null;
    $second  = null;
    $last    = null;

    foreach ($files as $k=>$v)
    {
        if ($v===array())
        {
            # 菜单中链接文件不存在，直接移除
            unset($files[$k]);
            continue;
        }

        # 分离出全部目录
        $tmp_file = current($v);
        if ($tmp_file['dir'])
        {
            if ($old_type!=$tmp_file['type'] || $old_dir!=$tmp_file['dir'])
            {
                # 处理目录TOP菜单
                $all_dirs[$tmp_file['out_dir']] = array
                (
                    'type' => $tmp_file['type'],
                    'dir'  => $tmp_file['dir'],
                );

                $old_type = $tmp_file['type'];
                $old_dir  = $tmp_file['dir'];
            }
        }


        if (null===$first)
        {
            $first = $k;
        }
        else if (null===$second)
        {
            $second = $k;
            $next_and_prev_list[$first] = array(null, $second);
        }

        if ($last)
        {
            if ($current)
            {
                $next = $k;
                $next_and_prev_list[$current] = array($prev, $next);
            }
            $current = $k;
        }

        $prev = $last;
        $last = $k;
    }

    # 处理最后一个文件
    $next_and_prev_list[$k] = array($prev, null);



    $parent_menu = array();

    foreach($all_dirs as $tmp_out_dir => $tmp_file)
    {
        # 将dir再用/分割开
        $tmp_dir_arr    = explode('/', trim($tmp_out_dir, '/'));

        # 将最后一个移除，得到上一层目录数组
        array_pop($tmp_dir_arr);

        # 超过1级
        $dir_c = count(explode('/', trim($tmp_file['dir'], '/')))>1?true:false;

        if ($dir_c)
        {
            $tmp_parent_dir = implode('/', $tmp_dir_arr).'/';
            $tmp_index_file = $tmp_parent_dir . 'index.md';
            $file_isset     = isset($files[$tmp_index_file]);

            if ($file_isset)
            {
                $default_title  = $files[$tmp_index_file];
                $default_title  = current($default_title);
                $default_title  = $default_title['title']?$default_title['title']:__('back up', $default_lang);
            }
            else
            {
                $default_title  = __('back up', $default_lang);
            }
        }

        foreach($config['lang'] as $lang => $lang_name)
        {
            if ($dir_c)
            {
                $tmp_menu = array();

                if ($parent_menu[$lang][$tmp_parent_dir])
                {
                    foreach($parent_menu[$lang][$tmp_parent_dir] as $k=>$v)
                    {
                        $tmp_menu['../'.$k] = $v;
                    }
                }
                if ($file_isset && isset($files[$tmp_index_file][$lang]['title']) && $files[$tmp_index_file][$lang]['title'])
                {
                    $tmp_menu['../index.html'] = $files[$tmp_index_file][$lang]['title'];
                }
                else
                {
                    $tmp_menu['../index.html'] = $default_title;
                }
            }
            else
            {
                # 直接复制group的目录设置
                $tmp_menu = $parent_menu_tpl[$lang][$tmp_file['type']];
            }

            $parent_menu[$lang][$tmp_out_dir] = $tmp_menu;
        }
    }

    print_r($menus);

    return $files;
}


function get_dir_files(&$files, $group_no, $group, $lang, $dir)
{
    global $functions, $menus;

    if ($group['base_href'])
    {
        $base_href = $group['base_href'];
    }
    else
    {
        $base_href = '';
    }
    if ($dir)foreach(explode('/', trim($dir, '/')) as $item)
    {
        $base_href .= '../';
    }

    $full_dir = $group['dir'].'guide/'.$lang.'/'.$dir;

    # 处理菜单，得到上下文关系
    $menu_file = $full_dir.'menu.md';

    # index.md 文件优先
    if (!isset($files[$group['out_dir'].$dir.'index.md']))
    {
        $files[$group['out_dir'].$dir.'index.md'] = array();
    }

    $tmp_menu = array();
    if (is_file($menu_file))
    {

        $menu_content = file_get_contents($menu_file);
        $menu_content = preg_replace('#<function>(([a-z0-9_]+)\.([a-z0-9_\.]+)\.([a-z0-9_]+))</function>#', $base_href.'[$1]($2/$3/functions/$4.html)', $menu_content);

        # 获取所有超链接
        if (preg_match_all('/\[([^\]]+)\]\(([^\)]+)\)/', $menu_content, $m))
        {
            foreach($m[2] as $k=>$tmp_url)
            {
                $tmp_url = replace_link_to_md_file($tmp_url, $group);
                if (!isset($files[$tmp_url]))
                {
                    $files[$tmp_url] = array();
                }
                $tmp_menu[$tmp_url] = $m[1][$k];
            }
        }

        $menus[$lang][$group['out_dir'].$dir] = $menu_file;
    }

    # 输出的目录
    $out_dir = $group['out_dir'].$dir;

    $have_index = false;
    $tmp_index_html = "##".__('Overview', $lang)."\n";

    foreach(glob($full_dir.'*') as $file)
    {
        if ($file=='.'||$file=='..')
        {
            continue;
        }
        elseif (is_dir($file))
        {
            get_dir_files($files, $group_no, $group, $lang, $dir.basename($file).'/');
            continue;
        }
        elseif (substr($file, -3)!='.md')
        {
            # 非.md文件忽略
            continue;
        }

        $filename      = basename($file, '.md');

        # 菜单文件忽略
        if ($filename=='menu')continue;

        if ($filename=='index')
        {
            $have_index = true;
            $tmp_index_html = '';
        }
        if (!$have_index)
        {
            # 首页索引临时文件内容
            $tmp_index_html .= " * [{$group['out_dir']}{$dir}{$filename}.html]({$filename}.html)\n";
        }

        $content       = file_get_contents($file);
        $function_name = get_function_name($content);
        $title         = get_title($content);
        $tmpfile       = $out_dir.$filename.'.md';
        if (!$title && isset($tmp_menu[$tmpfile]))
        {
            $title = $tmp_menu[$tmpfile];
        }

        $files[$tmpfile][$lang] = array
        (
            'filename'      => $filename,
            'type'          => $group['type'],
            'group_no'      => $group_no,
            'title'         => $title,
            'mtime'         => filemtime($file),
            'function_name' => $function_name,
            'file'          => $file,
            'dir'           => $dir,
            'out_dir'       => $out_dir,
        );

        if ($function_name)
        {
            if (substr($dir, -11)=='/functions/')
            {
                $d = substr($dir, 0, 9);
            }
            else
            {
                $d = $dir;
            }
            $f = $group['type'].'.'.str_replace('/', '.', $d.$filename);
            $functions[$f][$lang] = $function_name;
        }
    }


    if (!$have_index)
    {
        $files[$group['out_dir'].$dir.'index.md'][$lang] = array
        (
            'filename'      => 'index',
            'type'          => $group['type'],
            'group_no'      => $group_no,
            'title'         => __('Overview', $lang),
            'mtime'         => filemtime($file),
            'function_name' => '',
            'file'          => false,
            'dir'           => $dir,
            'out_dir'       => $out_dir,
            'content'       => $tmp_index_html,
        );
    }
}

/**
 * 获取页面标题
 */
function get_title($content)
{
    if (preg_match('#<title>(.*)</title>#', $content, $m) || preg_match('/^(?:[ \n|\r]+)?([^\-=\r\n]+)(?:[\r|\n]+)(?:[\-|=]+)(?:\r|\n)/', $content, $m) || preg_match('/^(?:[ \n|\r]+)?(?:[#]+)([^\r\n\-\=]+)(?:[#]+)?(?:\r|\n)?/', $content, $m))
    {
        return strip_tags($m[1], '');
    }
    else
    {
        return false;
    }
}

function get_function_name($content)
{
    if (preg_match('#<name>([^\n\r]+)</name>#', $content, $m))
    {
        return $m[1];
    }
    else
    {
        return false;
    }
}

// 将链接转换为从根目录开始的完整URL
function replace_link_to_md_file($tmp_url, $group)
{
    if (substr($tmp_url, 0, 1)=='/')
    {
        # 已是根目录URL
        $tmp_url = substr($tmp_url, 1);
    }
    else
    {
        # 得到文档根目录的URL
        $tmp_url = $group['out_dir'] . $tmp_url;
    }

    if (strpos($tmp_url, '/')!==false)
    {
        # 整理URL
        $tmp_url_arr = explode('/', $tmp_url);
        $i = 0;
        foreach($tmp_url_arr as $tmp)
        {
            if ($tmp=='.')
            {
                unset($tmp_url_arr[$i]);
            }
            elseif ($tmp=='..')
            {
                if ($i-1>=0)unset($tmp_url_arr[$i-1]);
            }
            else
            {
                $i++;
            }
        }

        # 得到整理后的URL
        $tmp_url = implode('/', $tmp_url_arr);
    }

    if (substr($tmp_url, -5)=='.html')
    {
        $tmp_url = substr($tmp_url, 0, -5);
    }
    elseif (substr($tmp_url, -1)=='/')
    {
        $tmp_url .= 'index';
    }

    return $tmp_url.'.md';
}

function __($str, $lang=null)
{
    global $config , $current_lang;
    if (null===$lang)
    {
        $lang = $current_lang;
    }
    if (isset($config['i18n'][$lang][$str]))return $config['i18n'][$lang][$str];
    return $str;
}





